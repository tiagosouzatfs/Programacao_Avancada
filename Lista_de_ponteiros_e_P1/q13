q13.

O uso de ponteiros para funções em C serve principalmente para definir, em tempo de execução, qual função será executada, sem a necessidade de escrever o nome da função, de forma explícita naquele ponto do código. Em geral, a definição de qual função será executada é feita em um outro ponto do código, fazendo o ponteiro apontar para a função desejada.

#include <stdio.h>
#include <stdlib.h>
void AlterarVetor(int * vetor, int elementos);
int main()
{
    int v[] = {5, 10, 15, 3, 10, 76, 5, 13, 33, 45};
    int * pt;
    int i;
    pt = v; //atribui o endereço do vetor
    AlterarVetor(v, 10);
    for(i = 0; i < 10; i++)
    {
        printf("V[%i] = %i\r\n", i, *(pt + i));
    }
    return 0;
}
void AlterarVetor(int * vetor, int elementos)
{
    int i;
    if(vetor != NULL)
    {
       for(i = 0; i < elementos; i++)
       {
          *(vetor) = *(vetor) * 2; //ex: V[i] = V[i] * 2
          vetor++; //desloca o ponteiro para o próximo elemento
       }
    }
}
	Esse processo é interessante, pois possibilita que alterações realizadas em um parâmetro dentro de uma função alterem o valor do argumento, que está em outro escopo. Nesse exemplo, o conteúdo do vetor é alterado em um escopo diferente de onde foi declarado. O mesmo pode ser realizado com variáveis comuns, sendo necessário utilizar o operador ‘&’ para obter o endereço da variável.
